// Mocks generated by Mockito 5.4.6 from annotations
// in onbit_v2_triple/test/presentation/pages/volume/volume_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:onbit_v2_triple/core/error/failure.dart' as _i7;
import 'package:onbit_v2_triple/core/logger/app_logger.dart' as _i3;
import 'package:onbit_v2_triple/domain/repositories/trade_repository.dart'
    as _i2;
import 'package:onbit_v2_triple/domain/usecases/get_volume_data.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTradeRepository_0 extends _i1.SmartFake
    implements _i2.TradeRepository {
  _FakeTradeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppLogger_1 extends _i1.SmartFake implements _i3.AppLogger {
  _FakeAppLogger_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetVolumeData].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetVolumeData extends _i1.Mock implements _i5.GetVolumeData {
  MockGetVolumeData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TradeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTradeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TradeRepository);

  @override
  _i3.AppLogger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeAppLogger_1(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i3.AppLogger);

  @override
  _i6.Future<_i4.Either<_i7.Failure, Map<String, double>>> call({
    required String? symbol,
    int? timeFrame,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #symbol: symbol,
            #timeFrame: timeFrame,
          },
        ),
        returnValue:
            _i6.Future<_i4.Either<_i7.Failure, Map<String, double>>>.value(
                _FakeEither_2<_i7.Failure, Map<String, double>>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #symbol: symbol,
              #timeFrame: timeFrame,
            },
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, Map<String, double>>>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i3.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void logInfo(String? message) => super.noSuchMethod(
        Invocation.method(
          #logInfo,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(
    String? message, {
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logError,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );
}
