{
  "model": "gpt-4",
  "messages": [
    { "role": "system", "content": "You are a senior developer. Summarize and analyze the following project context." },
    { "role": "user", "content": 
"Generated at: 2025-05-10 20:28:30 KST\n\n## 📄 README\n# 🧠 onbit_v2_triple\n\n[![Flutter CI](https://github.com/hundeok/onbit_v2_triple/actions/workflows/flutter_ci.yml/badge.svg)](https://github.com/hundeok/onbit_v2_triple/actions/workflows/flutter_ci.yml)  \n[![Code Coverage](https://codecov.io/gh/hundeok/onbit_v2_triple/branch/main/graph/badge.svg?token=5182d729-a03f-4417-8aea-7687b9307e84)](https://codecov.io/gh/hundeok/onbit_v2_triple)  \n![Branch](https://img.shields.io/badge/branch-main-blue)\n\n---\n\n## 🧠 프로젝트 개요\n\n**AI × 실시간 하이브리드 트레이딩 시스템**  \nGPT + Claude + Groq 기반의 트리플 협업 자동화 구조.  \nWebSocket + REST API 하이브리드 통신 체제를 도입하여  \n**“실시간성 × 안정성”**을 동시에 확보한 고성능 코인 분석 앱입니다.\n\n---\n\n## 🧩 아키텍처 구조\n\ncore/\n├── socket/ ← WebSocket 커넥션 전담\n├── api/ ← Dio 기반 REST 처리\n├── bridge/ ← 소켓/REST 데이터 허브 (옵션)\ndata/\n├── sources/ ← socket_, rest_ 분리\n├── repositories/ ← 실시간 + 백업 소스 통합\ndomain/\n├── entities/, usecases/, repositories/\npresentation/\n├── controllers/, pages/, widgets/\n\n\n> ✅ `4 Layer Clean Architecture`  \n> ✅ `GetX 기반 단방향 흐름`  \n> ✅ `WebSocket 주도 + REST 백업 하이브리드 체계`\n\n---\n\n## ✅ 주요 기능\n\n- 실시간 체결 데이터 감지 및 누적 시각화\n- 소켓 기반 고속 반응 시스템 + REST 초기화 로직\n- 트리플 AI 협업 (GPT/Claude/Groq) 로직 통합\n- 자동화 시그널 감지 + 조건 기반 트레이딩 구조화\n\n---\n\n## 🚀 실행 방법\n\n```bash\nflutter pub get\nbash tool/watch_build.sh     # json_serializable 자동 생성\nflutter run\n🧪 테스트\n\nflutter test\nflutter test --coverage\n통합 테스트: test/integration/app_flow_test.dart\n커버리지 목표: 80%+\n사용 툴: mockito, patrol, mock_server\n🧠 설계 철학\n\n항목\t기준\n파일명\tsnake_case.dart\n클래스명\tPascalCase\nimport 규칙\t같은 레이어: 상대경로 / 크로스 레이어: package:onbit_v2_triple/\nDI 구조\tGet.lazyPut(() => X(), tag: 'data.xxx')\n에러 처리\tEither<Failure, T> + .fold() 처리\n상태 공유\tGetX Controller 최소화 + .putAsync() 재시도 포함\n기술부채 추적\t// TODO: [TECH-DEBT] + GitHub Issues 연결\n🌍 다국어 지원\n\n.arb 파일 (en.arb, ko.arb)\nflutter gen-l10n 자동화\nl10n.yaml: nullable-getter: false\n🔄 통신 체제 (하이브리드 전략)\n\n흐름\t기술\t주기\n초기 로딩\tREST\t앱 진입 시 1회\n실시간 체결 감시\tWebSocket\t상시 연결 유지\n리프레시 백업\tREST\t30초~2분 간격 또는 실패 시\n소켓 실패 대비\tREST fallback\t즉시\nWebSocket = 실시간, 빠름\nREST = 백업, 정합성 보완\n🚧 CI/CD 자동화\n\nGitHub Actions\nflutter analyze\nflutter test\nflutter build --release --obfuscate\nflutter build --analyze-size\n문서: CHANGELOG.md, CONTRIBUTING.md\n브랜치 네이밍:\nfeature/socket-stream\nfix/trade-bug\n📈 성능 모니터링\n\nPerformanceOverlay + profile 빌드\nStreamQueue/compute() 최적화\nRx throttle/debounce 연산 사용\n🔐 프로덕션 대응\n\nSSL 핀닝 (Dio)\nSecure Storage → timeout + catch\nCrashlytics + 로그 gzip 압축 로테이션\nUX 안정화: Skeleton Loader, Fallback UI, 상태 표시 바\n📦 실행 우선순위 (Phase 1)\n\ncore/socket/socket_service.dart\ndata/sources/socket_trade_source.dart\npresentation/widgets/trade_card.dart\ndomain/usecases/subscribe_live_trades.dart\ntest/integration/app_flow_test.dart\n📎 문서 & 참고\n\ndocs/extension_points.md → 확장 기준\nanalysis_options.yaml → lint 규칙\ntool/watch_build.sh → 빌드 자동화 스크립트\nbuild.yaml → explicit_to_json: true\n✊ 프로젝트 선언\n\n이 프로젝트는 단순한 앱이 아닙니다.\n실시간 + 자동화 + AI 기반 트레이딩 프레임워크의 시작점입니다.\n모든 협업자 및 AI Agent는 위 구조를 기반으로\n클래스, 유즈케이스, 컨트롤러를 정확히 구성해야 합니다.\n\n## 📦 프로젝트 디렉토리 구조\n\nlib/\n├── app.dart                           # 앱 진입 설정, MaterialApp 라우팅 등\n├── core\n│   ├── api\n│   │   └── api_service.dart           # REST API 요청 (Dio 기반)\n│   ├── bridge\n│   │   └── data_bus.dart              # REST ↔ WebSocket 간 데이터 허브/변환기\n│   ├── config\n│   │   ├── app_config.dart            # 앱 환경 설정 클래스\n│   │   └── env_config.dart            # prod/dev 환경 구분 및 env 변수 정의\n│   ├── di\n│   │   ├── bindings\n│   │   │   ├── controller_binding.dart     # GetX Controller 등록\n│   │   │   ├── data_source_binding.dart    # DataSource DI 등록\n│   │   │   ├── processor_binding.dart      # 데이터 처리 계층 DI\n│   │   │   ├── repository_binding.dart     # Repository DI\n│   │   │   ├── service_binding.dart        # Core 서비스 DI (e.g. PlatformService)\n│   │   │   ├── usecase_binding.dart        # UseCase DI 등록\n│   │   │   └── view_bindings.dart          # View/Page 바인딩 관리\n│   │   └── injection_container.dart   # DI 초기화 컨테이너\n│   ├── error\n│   │   ├── exception.dart             # 예외 정의\n│   │   └── failure.dart               # 실패 응답 모델 (Either 실패 케이스)\n│   ├── lifecycle\n│   │   └── app_lifecycle_manager.dart # 앱 포그라운드/백그라운드 감지\n│   ├── logger\n│   │   └── app_logger.dart            # 공통 로거 클래스 (dev/prod 대응 포함)\n│   ├── memory\n│   │   └── object_pool.dart           # 객체 재사용 풀 (성능 최적화용)\n│   ├── navigation\n│   │   └── app_router.dart            # 라우팅 관리 (GetX Routes)\n│   ├── network                        # (비워둠) 추후 다중 네트워크 계층 도입 시 사용\n│   ├── pipeline                       # (비워둠) 고속 필터링/데이터 리듬 제어 등 스트림 파이프라인 구성용\n│   ├── scaling\n│   │   └── rate_limiter.dart          # 요청 속도 제한 유틸리티\n│   ├── services\n│   │                                   # (비어 있음) 플랫폼 서비스 통합용 (예: FCM, 공유 등)\n│   ├── socket\n│   │   ├── socket_service.dart        # WebSocket 커넥션, ping/pong, reconnect\n│   │   └── trade_pipeline.dart        # 실시간 체결 흐름 파이프라인 처리\n│   ├── storage\n│   │   └── local_storage.dart         # SharedPreferences 기반 저장소\n│   ├── streaming\n│   │   └── backpressure_controller.dart # 소켓 스트림 과부하 조절 유닛\n│   ├── theme\n│   │   ├── app_theme_manager.dart     # 테마 전환 로직\n│   │   └── app_theme.dart             # 테마 정의값 (light/dark)\n│   └── workers\n│       └── isolate_worker.dart        # Isolate 기반 비동기 처리 유닛\n\n├── data\n│   ├── datasources\n│   │   └── real_market_data_source.dart # 실제 외부 마켓 데이터 처리 소스\n│   ├── models\n│   │   ├── market_model.dart          # 마켓 정보 모델\n│   │   ├── socket_trade_message_model.dart # WebSocket 체결 메시지 모델\n│   │   └── trade_model.dart           # 일반 트레이드 데이터 모델\n│   ├── processors\n│   │   ├── trade_aggregator.dart      # 체결 데이터 집계 처리\n│   │   └── trade_processor.dart       # 체결 데이터 분석/가공 처리\n│   ├── repositories\n│   │   └── trade_repository_impl.dart # 실제 데이터 조합 구현체 (REST + 소켓 통합)\n│   └── sources\n│       ├── rest\n│       │   ├── market_data_source.dart   # REST 기반 마켓 데이터 fetch\n│       │   └── rest_trade_source.dart    # REST 기반 체결 데이터 fetch\n│       └── socket\n│           └── socket_trade_source.dart # WebSocket 기반 실시간 체결 감시\n\n├── domain\n│   ├── entities\n│   │   ├── trade.dart                 # 트레이드 도메인 모델\n│   │   └── trade.g.dart               # json_serializable 자동 생성 파일\n│   ├── events\n│   │   └── trade_event.dart           # 체결 이벤트 정의\n│   ├── repositories\n│   │   └── trade_repository.dart      # Repository 추상 인터페이스\n│   └── usecases\n│       ├── get_filtered_trades.dart   # 조건 필터링 체결 데이터\n│       ├── get_momentary_trades.dart  # 순간 체결 감지\n│       ├── get_surge_trades.dart      # 급등락 감지\n│       ├── get_volume_data.dart       # 거래량 기반 감지\n│       └── subscribe_live_trades.dart # WebSocket 기반 실시간 구독 유즈케이스\n\n├── generated\n│   ├── intl\n│   │   ├── messages_all.dart          # 다국어 메시지 all\n│   │   └── messages_en.dart           # 영어 번역 파일\n│   └── l10n.dart                      # 자동 생성된 intl 엔트리 포인트\n\n├── main.dart                          # 앱 시작점\n\n├── presentation\n│   ├── app.dart                       # 앱 외부 껍데기 / 라우터 초기화\n│   ├── common\n│   │   ├── empty_state_widget.dart    # 비어있을 때 공통 UI\n│   │   ├── error_widget.dart          # 에러 표시용 위젯\n│   │   └── loading_widget.dart        # 로딩 인디케이터\n│   ├── controllers\n│   │   ├── locale_controller.dart     # 다국어 설정\n│   │   ├── main_controller.dart       # 메인 홈 제어\n│   │   ├── momentary_controller.dart  # 순간 감지 전용 컨트롤러\n│   │   ├── surge_controller.dart      # 급등락 제어\n│   │   ├── trade_controller.dart      # 체결 데이터 제어\n│   │   └── volume_controller.dart     # 거래량 제어\n│   ├── pages\n│   │   ├── main/main_view.dart        # 메인 뷰\n│   │   ├── momentary/momentary_view.dart # 순간 감지 뷰\n│   │   ├── notifications/notifications_view.dart # 알림 페이지\n│   │   ├── settings/settings_view.dart  # 설정 페이지\n│   │   ├── splash/splash_view.dart      # 스플래시 화면\n│   │   ├── surge/surge_view.dart        # 급등락 뷰\n│   │   ├── trade/trade_view.dart        # 체결 데이터 뷰\n│   │   └── volume/volume_view.dart      # 거래량 뷰\n│   └── widgets\n│       ├── common/connection_status_bar.dart # 네트워크 상태 표시 바\n│       ├── common_app_bar.dart         # 공통 앱 바 위젯\n│       ├── drawer/app_drawer.dart      # 좌측 사이드메뉴\n│       ├── index.dart                  # export 모듈화\n│       └── trade_card_widget.dart      # 체결 카드 UI 컴포넌트\n\n└── utils\n    └── utils                          # 공통 유틸 함수 모음\n\n\nTest push\n\n\n## 📝 Changelog\n# 📝 Changelog\nGenerated at: #오후\n\n## 🔄 Recent Commits\n\n- docs: update README with badges (657f0e0)\n- chore: add flutter summarize lib structure workflow (3182f22)\n- chore: add flutter project snapshot workflow (5ac641c)\n- fix: finalized flutter_readme_badge3 workflow (02c6e88)\n- fix: improve flutter_module_summary workflow (3c9a230)\n- fix: improve flutter_changelog.yml (0692c64)\n- Fix flutter_ci.yml workflow format (b83cf63)\n- Add working AppLogger and tests for coverage (aa67331)\n- Add logger test to trigger real coverage (7558dfc)\n- Fix: set Flutter SDK to 3.22.1 for Dart 3.4 compatibility (5220c0d)\n\n## 📦 Module Summary\n## 🧱 Module Summary - lib/ 구조\n\nlib/\n├── app.dart\n├── core\n│   ├── config\n│   │   ├── app_config.dart\n│   │   └── env_config.dart\n│   ├── di\n│   │   ├── bindings\n│   │   │   ├── controller_binding.dart\n│   │   │   ├── data_source_binding.dart\n│   │   │   ├── processor_binding.dart\n│   │   │   ├── repository_binding.dart\n│   │   │   ├── service_binding.dart\n│   │   │   ├── usecase_binding.dart\n│   │   │   └── view_bindings.dart\n│   │   └── injection_container.dart\n│   ├── error\n│   │   ├── exception.dart\n│   │   └── failure.dart\n│   ├── lifecycle\n│   │   └── app_lifecycle_manager.dart\n│   ├── logger\n│   │   └── app_logger.dart\n│   ├── memory\n│   │   └── object_pool.dart\n│   ├── navigation\n│   │   └── app_router.dart\n│   ├── network\n│   │   ├── api_client.dart\n│   │   └── connectivity_manager.dart\n│   ├── pipeline\n│   │   └── trade_pipeline.dart\n│   ├── sample.dart\n│   ├── scaling\n│   │   └── rate_limiter.dart\n│   ├── services\n│   │   └── platform_service.dart\n│   ├── storage\n│   │   └── local_storage.dart\n│   ├── streaming\n│   │   └── backpressure_controller.dart\n│   ├── theme\n│   │   ├── app_theme_manager.dart\n│   │   └── app_theme.dart\n│   └── workers\n│       └── isolate_worker.dart\n├── data\n│   ├── datasources\n│   │   ├── market_data_source.dart\n│   │   ├── mock_market_data_source.dart\n│   │   ├── real_market_data_source.dart\n│   │   ├── socket_trade_source.dart\n│   │   └── trade_data_source.dart\n│   ├── models\n│   │   ├── market_model.dart\n│   │   └── trade_model.dart\n│   ├── processors\n│   │   └── trade_processor.dart\n│   └── repositories\n│       └── trade_repository_impl.dart\n├── domain\n│   ├── entities\n│   │   └── trade.dart\n│   ├── events\n│   │   └── trade_event.dart\n│   ├── repositories\n│   │   └── trade_repository.dart\n│   └── usecases\n│       ├── get_filtered_trades.dart\n│       ├── get_momentary_trades.dart\n│       ├── get_surge_trades.dart\n│       └── get_volume_data.dart\n├── main.dart\n├── presentation\n│   ├── app.dart\n│   ├── common\n│   │   ├── empty_state_widget.dart\n│   │   ├── error_widget.dart\n│   │   └── loading_widget.dart\n│   ├── controllers\n│   │   ├── main_controller.dart\n│   │   ├── momentary_controller.dart\n│   │   ├── surge_controller.dart\n│   │   ├── trade_controller.dart\n│   │   └── volume_controller.dart\n│   ├── pages\n│   │   ├── main\n│   │   │   └── main_view.dart\n│   │   ├── momentary\n│   │   │   └── momentary_view.dart\n│   │   ├── notifications\n│   │   │   └── notifications_view.dart\n│   │   ├── settings\n│   │   │   └── settings_view.dart\n│   │   ├── splash\n│   │   │   └── splash_view.dart\n│   │   ├── surge\n│   │   │   └── surge_view.dart\n│   │   ├── trade\n│   │   │   └── trade_view.dart\n│   │   └── volume\n│   │       └── volume_view.dart\n│   └── widgets\n│       ├── common\n│       │   └── connection_status_bar.dart\n│       ├── common_app_bar.dart\n│       ├── drawer\n│       │   └── app_drawer.dart\n│       ├── index.dart\n│       └── trade_card_widget.dart\n└── utils\n\n44 directories, 67 files\n"
    }
  ]
}
